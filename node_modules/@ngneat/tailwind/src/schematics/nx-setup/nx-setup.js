"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const schematics_1 = require("@angular-devkit/schematics");
const package_manager_1 = require("@nrwl/tao/src/shared/package-manager");
const workspace_1 = require("@nrwl/workspace");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const child_process_1 = require("child_process");
const utils_1 = require("../../utils");
const normalize_options_nx_1 = require("../../utils/normalize-options-nx");
function default_1(options) {
    return (tree, context) => {
        const [ngCliVersion, isTailwindSupported] = utils_1.checkCliVersion(tree, utils_1.minimumAngularCliVersion, '>=');
        if (!isTailwindSupported && ngCliVersion) {
            const tailwindPkg = '@ngneat/tailwind';
            const tailwindDep = dependencies_1.getPackageJsonDependency(tree, tailwindPkg);
            if (tailwindDep != null) {
                child_process_1.execSync(`${package_manager_1.getPackageManagerCommand().rm} ${tailwindPkg}`);
            }
            context.logger.info(`
Detected AngularCLI version is ${ngCliVersion} which does not support TailwindCSS natively.
Please run "ng add @ngneat/tailwind@6" for Custom Webpack support.
`);
            return tree;
        }
        if (!utils_1.isNx(tree)) {
            context.logger.fatal('Schematics is not invoked inside of a Nx workspace. Please try again in a Nx workspace.');
            return;
        }
        const normalizedOptions = normalize_options_nx_1.normalizeOptionsNx(options, tree, context);
        return schematics_1.chain([
            addDependenciesToPackageJson(normalizedOptions.dependencies),
            utils_1.addConfigFiles(normalizedOptions),
            utils_1.updateProjectRootStyles(normalizedOptions.projectName, workspace_1.getWorkspace, workspace_1.updateWorkspace),
            utils_1.updateIndexHtml(normalizedOptions.projectName, normalizedOptions.darkMode, workspace_1.updateWorkspace),
        ])(tree, context);
    };
}
exports.default = default_1;
function addDependenciesToPackageJson(dependencies) {
    return (tree, ctx) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const devDeps = (yield Promise.all(dependencies.map((dep) => utils_1.getLatestNodeVersion(dep).then(({ name, version }) => {
            ctx.logger.info(`✅️ Added ${name}@${version}`);
            return { name, version };
        })))).reduce((result, { name, version }) => {
            result[name] = version;
            return result;
        }, {});
        return workspace_1.addDepsToPackageJson({}, devDeps)(tree, ctx);
    });
}
//# sourceMappingURL=nx-setup.js.map