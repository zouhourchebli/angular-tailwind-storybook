"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const schematics_utilities_1 = require("schematics-utilities");
const ts = require("typescript");
const fs = require("fs");
const utils_1 = require("./utils");
function installPackageJsonDependencies() {
    return (host, context) => {
        context.addTask(new tasks_1.NodePackageInstallTask());
        context.logger.log('info', `üîç Installing package...`);
        return host;
    };
}
function getTsSourceFile(host, path) {
    const buffer = host.read(path);
    if (!buffer) {
        throw new schematics_1.SchematicsException(`Could not read file (${path}).`);
    }
    const content = buffer.toString();
    return ts.createSourceFile(path, content, ts.ScriptTarget.Latest, true);
}
function injectImports(options) {
    return (host, context) => {
        const workspace = schematics_utilities_1.getWorkspace(host);
        const project = schematics_utilities_1.getProjectFromWorkspace(workspace, Object.keys(workspace.projects)[0]);
        const modulePath = schematics_utilities_1.getAppModulePath(host, project.architect.build.options.main);
        const moduleSource = getTsSourceFile(host, modulePath);
        const change = utils_1.insertImport(moduleSource, modulePath, 'SvgIconsModule', '@ngneat/svg-icon');
        if (change) {
            const recorder = host.beginUpdate(modulePath);
            recorder.insertLeft(change.pos, change.toAdd);
            host.commitUpdate(recorder);
        }
        return host;
    };
}
function addModuleToImports(options) {
    return (host, context) => {
        const workspace = schematics_utilities_1.getWorkspace(host);
        const project = schematics_utilities_1.getProjectFromWorkspace(workspace, Object.keys(workspace.projects)[0]);
        const moduleImport = `SvgIconsModule.forRoot({
      icons: [],
    })`;
        schematics_utilities_1.addModuleImportToRootModule(host, moduleImport, null, project);
        context.logger.log('info', `‚úÖÔ∏è @ngneat/svg-icon is imported`);
        return host;
    };
}
function log() {
    return (host, context) => {
        context.logger.log('info', `üëè @ngneat/svg-icon ready to use`);
        return host;
    };
}
function addScripts() {
    return (host, context) => {
        const content = fs.readFileSync('./package.json', 'utf-8');
        const asJSON = JSON.parse(content);
        asJSON.scripts['generate-icons'] = 'svg-generator';
        asJSON['devDependencies']['@ngneat/svg-generator'] = '^2.0.0';
        asJSON['svgGenerator'] = {
            outputPath: './src/app/svg',
            prefix: 'app',
            srcPath: './src/assets/svg',
            svgoConfig: {
                plugins: [
                    {
                        removeDimensions: true,
                        cleanupAttrs: true,
                    },
                ],
            },
        };
        fs.writeFileSync('./package.json', JSON.stringify(asJSON, null, 2));
        context.logger.log('info', `‚úÖÔ∏è Update package.json`);
        return host;
    };
}
process.on('exit', function () {
    const dirPath = './src/assets/svg';
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath);
    }
    const dir = fs.readdirSync(dirPath);
    if (dir.length < 1) {
        console.log(`‚úÖÔ∏è Ready. Put your svg icons in src/assets/svg and then 'npm run generate-icons'`);
        return;
    }
    require('child_process').execSync('npm run generate-icons');
    console.log(`‚úÖÔ∏è npm run generate-icons`);
    return;
});
function ngAdd(options) {
    return schematics_1.chain([
        addScripts(),
        installPackageJsonDependencies(),
        addModuleToImports(options),
        injectImports(options),
        log(),
    ]);
}
exports.default = ngAdd;
//# sourceMappingURL=index.js.map