"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAngularProjectTarget = exports.getDefaultProjectName = exports.readAngularWorkspaceConfig = void 0;
var node_1 = require("@angular-devkit/core/node");
var core_1 = require("@angular-devkit/core");
/**
 * Returns the workspace definition
 *
 * - Either from NX if it is present
 * - Either from `@angular-devkit/core` -> https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/core
 */
exports.readAngularWorkspaceConfig = function (dirToSearch) { return __awaiter(void 0, void 0, void 0, function () {
    var host, nxWorkspace_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                host = core_1.workspaces.createWorkspaceHost(new node_1.NodeJsSyncHost());
                try {
                    /**
                     * Apologies for the following line
                     * If there's a better way to do it, let's do it
                     */
                    /* eslint-disable global-require */
                    // catch if nx.json does not exist
                    require('@nrwl/workspace').readNxJson();
                    nxWorkspace_1 = require('@nrwl/workspace').readWorkspaceConfig({
                        format: 'angularCli',
                        path: dirToSearch,
                    });
                    // Use the workspace version of nx when angular looks for the angular.json file
                    host.readFile = function (path) {
                        if (typeof path === 'string' && path.endsWith('angular.json')) {
                            return Promise.resolve(JSON.stringify(nxWorkspace_1));
                        }
                        return host.readFile(path);
                    };
                }
                catch (e) {
                    // Ignore if the client does not use NX
                }
                return [4 /*yield*/, core_1.workspaces.readWorkspace(dirToSearch, host)];
            case 1: return [2 /*return*/, (_a.sent()).workspace];
        }
    });
}); };
exports.getDefaultProjectName = function (workspace) {
    var environmentProjectName = process.env.STORYBOOK_ANGULAR_PROJECT;
    if (environmentProjectName) {
        return environmentProjectName;
    }
    if (workspace.projects.has('storybook')) {
        return 'storybook';
    }
    if (workspace.extensions.defaultProject) {
        return workspace.extensions.defaultProject;
    }
    var firstProjectName = workspace.projects.keys().next().value;
    if (firstProjectName) {
        return firstProjectName;
    }
    throw new Error('No angular projects found');
};
exports.findAngularProjectTarget = function (workspace, projectName, targetName) {
    if (!workspace.projects || !Object.keys(workspace.projects).length) {
        throw new Error('No angular projects found');
    }
    var project = workspace.projects.get(projectName);
    if (!project) {
        throw new Error("\"" + projectName + "\" project is not found in angular.json");
    }
    if (!project.targets.has(targetName)) {
        throw new Error("\"" + targetName + "\" target is not found in \"" + projectName + "\" project");
    }
    var target = project.targets.get(targetName);
    return { project: project, target: target };
};
