import webpack from 'webpack';
import TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';
import { Options as CoreOptions } from '@storybook/core-common';
export declare type Options = CoreOptions & {
    angularBrowserTarget?: string;
};
export declare function webpackFinal(baseConfig: webpack.Configuration, options: Options): Promise<webpack.Configuration | {
    entry: any[];
    module: {
        rules: webpack.RuleSetRule[];
        noParse?: RegExp | RegExp[] | ((content: string) => boolean);
        unknownContextRequest?: string;
        unknownContextRecursive?: boolean;
        unknownContextRegExp?: RegExp;
        unknownContextCritical?: boolean;
        exprContextRequest?: string;
        exprContextRegExp?: RegExp;
        exprContextRecursive?: boolean;
        exprContextCritical?: boolean;
        wrappedContextRegExp?: RegExp;
        wrappedContextRecursive?: boolean;
        wrappedContextCritical?: boolean;
        strictExportPresence?: boolean;
    };
    plugins: webpack.Plugin[];
    resolve: {
        modules: string[];
        plugins: TsconfigPathsPlugin[];
        descriptionFiles?: string[];
        mainFields?: string[] | string[][];
        aliasFields?: string[] | string[][];
        mainFiles?: string[];
        extensions?: string[];
        enforceExtension?: boolean;
        alias?: {
            [key: string]: string;
        };
        unsafeCache?: boolean | {};
        cachePredicate?(data: {
            path: string;
            request: string;
        }): boolean;
        symlinks?: boolean;
        cacheWithContext?: boolean;
        roots?: string[];
    };
    resolveLoader: webpack.ResolveLoader;
    mode?: "development" | "production" | "none";
    name?: string;
    context?: string;
    devtool?: webpack.Options.Devtool;
    output?: webpack.Output;
    externals?: string | RegExp | webpack.ExternalsObjectElement | webpack.ExternalsFunctionElement | webpack.ExternalsElement[];
    target?: "node" | "web" | "webworker" | "async-node" | "node-webkit" | "atom" | "electron" | "electron-renderer" | "electron-preload" | "electron-main" | ((compiler?: any) => void);
    bail?: boolean;
    profile?: boolean;
    cache?: boolean | object;
    watch?: boolean;
    watchOptions?: webpack.ICompiler.WatchOptions;
    node?: false | webpack.Node;
    amd?: {
        [moduleName: string]: boolean;
    };
    recordsPath?: string;
    recordsInputPath?: string;
    recordsOutputPath?: string;
    stats?: webpack.Stats.ToStringOptions;
    performance?: false | webpack.Options.Performance;
    parallelism?: number;
    optimization?: webpack.Options.Optimization;
    devServer?: import("webpack-dev-server").Configuration;
}>;
