"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const package_manager_1 = require("@angular/cli/utilities/package-manager");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const workspace_1 = require("@schematics/angular/utility/workspace");
const child_process_1 = require("child_process");
const utils_1 = require("../../utils");
const normalize_options_ng_1 = require("../../utils/normalize-options-ng");
function default_1(options) {
    return (tree, context) => {
        if (utils_1.isNx(tree)) {
            // If ng-add is invoked inside of Nx Workspace, call the nx-setup schematics instead
            context.addTask(new tasks_1.RunSchematicTask('nx-setup', options));
            return tree;
        }
        const [cliVersion, isTailwindSupported] = utils_1.checkCliVersion(tree, utils_1.minimumAngularCliVersion, '>=');
        if (!isTailwindSupported) {
            try {
                const tailwindPkg = '@ngneat/tailwind';
                const tailwindDep = dependencies_1.getPackageJsonDependency(tree, tailwindPkg);
                if (tailwindDep != null) {
                    child_process_1.execSync(`${package_manager_1.getPackageManager(tree.root.path)} rm ${tailwindPkg}`);
                }
            }
            catch (err) { }
            context.logger.info(`
Detected AngularCLI version is ${cliVersion} which does not support TailwindCSS natively.
Please run "ng add @ngneat/tailwind@6" for Custom Webpack support.
`);
            return tree;
        }
        return normalize_options_ng_1.normalizeOptionsNg(options, tree).then((normalizedOptions) => schematics_1.chain([
            addPackageJsonDependencies(normalizedOptions.dependencies),
            installDependencies(),
            setupProject(normalizedOptions),
        ]));
    };
}
exports.default = default_1;
function addPackageJsonDependencies(dependencies) {
    return (tree, context) => {
        return Promise.all(dependencies.map((dep) => utils_1.getLatestNodeVersion(dep).then(({ name, version }) => {
            context.logger.info(`✅️ Added ${name}@${version}`);
            const nodeDependency = {
                name,
                version,
                type: dependencies_1.NodeDependencyType.Dev,
                overwrite: false,
            };
            dependencies_1.addPackageJsonDependency(tree, nodeDependency);
        }))).then(() => tree);
    };
}
function installDependencies() {
    return (tree, context) => {
        context.addTask(new tasks_1.NodePackageInstallTask());
        context.logger.info('✅️ Installed dependencies');
        return tree;
    };
}
function setupProject(options) {
    return schematics_1.chain([
        utils_1.addConfigFiles(options),
        utils_1.updateProjectRootStyles(options.project, workspace_1.getWorkspace, workspace_1.updateWorkspace),
        utils_1.updateIndexHtml(options.project, options.darkMode, workspace_1.updateWorkspace),
    ]);
}
//# sourceMappingURL=ng-add.js.map