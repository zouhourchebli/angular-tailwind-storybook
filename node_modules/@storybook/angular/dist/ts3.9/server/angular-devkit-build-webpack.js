"use strict";
/**
 * This file is to be watched !
 * The code must be compatible from @angular-devkit version 6.1.0 to the latest supported
 *
 * It uses code block of angular cli to extract parts of webpack configuration
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractAngularCliWebpackConfig = void 0;
var path_1 = __importDefault(require("path"));
var core_1 = require("@angular-devkit/core");
var node_1 = require("@angular-devkit/core/node");
var module_is_available_1 = require("./utils/module-is-available");
var normalize_asset_patterns_1 = require("./utils/normalize-asset-patterns");
var normalize_optimization_1 = require("./utils/normalize-optimization");
var importAngularCliWebpackConfigGenerator = function () {
    var angularWebpackConfig;
    // First we look for webpack config according to directory structure of Angular 11
    if (module_is_available_1.moduleIsAvailable('@angular-devkit/build-angular/src/webpack/configs')) {
        // eslint-disable-next-line global-require
        angularWebpackConfig = require('@angular-devkit/build-angular/src/webpack/configs');
    }
    // We fallback on directory structure of Angular 10 (and below)
    else if (module_is_available_1.moduleIsAvailable('@angular-devkit/build-angular/src/angular-cli-files/models/webpack-configs')) {
        // eslint-disable-next-line global-require
        angularWebpackConfig = require('@angular-devkit/build-angular/src/angular-cli-files/models/webpack-configs');
    }
    else {
        throw new Error('Webpack config not found in "@angular-devkit/build-angular"');
    }
    return {
        getCommonConfig: angularWebpackConfig.getCommonConfig,
        getStylesConfig: angularWebpackConfig.getStylesConfig,
    };
};
var importAngularCliReadTsconfigUtil = function () {
    // First we look for webpack config according to directory structure of Angular 11
    if (module_is_available_1.moduleIsAvailable('@angular-devkit/build-angular/src/utils/read-tsconfig')) {
        // eslint-disable-next-line global-require
        return require('@angular-devkit/build-angular/src/utils/read-tsconfig');
    }
    // We fallback on directory structure of Angular 10 (and below)
    if (module_is_available_1.moduleIsAvailable('@angular-devkit/build-angular/src/angular-cli-files/utilities/read-tsconfig')) {
        // eslint-disable-next-line global-require
        return require('@angular-devkit/build-angular/src/angular-cli-files/utilities/read-tsconfig');
    }
    throw new Error('ReadTsconfig not found in "@angular-devkit/build-angular"');
};
var buildWebpackConfigOptions = function (dirToSearch, project, target) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, projectBuildOptions, requiredOptions, workspaceRootNormalized, projectRootNormalized, sourceRootNormalized, tsConfigPath, tsConfig, ts, scriptTarget, buildOptions;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = target.options, projectBuildOptions = _a === void 0 ? {} : _a;
                requiredOptions = ['tsConfig', 'assets', 'optimization'];
                if (!requiredOptions.every(function (key) { return key in projectBuildOptions; })) {
                    throw new Error("Missing required options in project target. Check \"" + requiredOptions.join(', ') + "\"");
                }
                workspaceRootNormalized = core_1.normalize(dirToSearch);
                projectRootNormalized = core_1.resolve(workspaceRootNormalized, core_1.normalize(project.root || ''));
                sourceRootNormalized = project.sourceRoot
                    ? core_1.resolve(workspaceRootNormalized, core_1.normalize(project.sourceRoot))
                    : undefined;
                tsConfigPath = path_1.default.resolve(core_1.getSystemPath(workspaceRootNormalized), projectBuildOptions.tsConfig);
                tsConfig = importAngularCliReadTsconfigUtil().readTsconfig(tsConfigPath);
                return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('typescript')); })];
            case 1:
                ts = _b.sent();
                scriptTarget = tsConfig.options.target || ts.ScriptTarget.ES5;
                buildOptions = __assign(__assign({ 
                    // Default options
                    budgets: [], fileReplacements: [], main: '', outputPath: 'dist/storybook-angular', scripts: [], sourceMap: {}, styles: [], lazyModules: [] }, projectBuildOptions), { assets: normalize_asset_patterns_1.normalizeAssetPatterns(projectBuildOptions.assets || [], workspaceRootNormalized, projectRootNormalized, sourceRootNormalized), optimization: normalize_optimization_1.normalizeOptimization(projectBuildOptions.optimization), 
                    // Forced options
                    statsJson: false, forkTypeChecker: false });
                return [2 /*return*/, {
                        root: core_1.getSystemPath(workspaceRootNormalized),
                        // The dependency of `@angular-devkit/build-angular` to `@angular-devkit/core` is not exactly the same version as the one for storybook (node modules of node modules ^^)
                        logger: node_1.createConsoleLogger(),
                        projectRoot: core_1.getSystemPath(projectRootNormalized),
                        sourceRoot: core_1.getSystemPath(sourceRootNormalized),
                        buildOptions: buildOptions,
                        tsConfig: tsConfig,
                        tsConfigPath: tsConfigPath,
                        scriptTarget: scriptTarget,
                    }];
        }
    });
}); };
/**
 * Uses angular cli to extract webpack configuration.
 * The `AngularCliWebpackConfig` type lists the parts used by storybook
 */
function extractAngularCliWebpackConfig(dirToSearch, project, target) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var _b, getCommonConfig, getStylesConfig, webpackConfigOptions, cliCommonConfig, cliStyleConfig;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _b = importAngularCliWebpackConfigGenerator(), getCommonConfig = _b.getCommonConfig, getStylesConfig = _b.getStylesConfig;
                    return [4 /*yield*/, buildWebpackConfigOptions(dirToSearch, project, target)];
                case 1:
                    webpackConfigOptions = _c.sent();
                    cliCommonConfig = getCommonConfig(webpackConfigOptions);
                    cliStyleConfig = getStylesConfig(webpackConfigOptions);
                    return [2 /*return*/, {
                            cliCommonWebpackConfig: {
                                plugins: cliCommonConfig.plugins,
                                resolve: {
                                    modules: (_a = cliCommonConfig.resolve) === null || _a === void 0 ? void 0 : _a.modules,
                                },
                                resolveLoader: cliCommonConfig.resolveLoader,
                            },
                            cliStyleWebpackConfig: {
                                entry: cliStyleConfig.entry,
                                module: {
                                    rules: __spreadArrays(cliStyleConfig.module.rules),
                                },
                                plugins: cliStyleConfig.plugins,
                            },
                            tsConfigPath: webpackConfigOptions.tsConfigPath,
                        }];
            }
        });
    });
}
exports.extractAngularCliWebpackConfig = extractAngularCliWebpackConfig;
