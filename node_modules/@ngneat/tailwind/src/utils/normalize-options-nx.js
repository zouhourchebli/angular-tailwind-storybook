"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptionsNx = exports.getDefaultProjectFromGraph = void 0;
const workspace_1 = require("@nrwl/workspace");
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const get_dependencies_1 = require("./get-dependencies");
function getDefaultProjectFromGraph(graph, projectName) {
    if (projectName)
        return graph.nodes[projectName];
    return Object.values(graph.nodes).find((node) => node.type === 'app' &&
        node.data.projectType === workspace_1.ProjectType.Application &&
        Object.values(node.data.architect).some((target) => target.builder.includes('angular')));
}
exports.getDefaultProjectFromGraph = getDefaultProjectFromGraph;
function normalizeOptionsNx(options, tree, context) {
    const { plugins, dependencies } = get_dependencies_1.getDependencies(options.plugins);
    const darkMode = options.darkMode || 'none';
    const project = getDefaultProjectFromGraph(workspace_1.getProjectGraphFromHost(tree), options.project);
    if (project == null) {
        const msg = `Cannot find any Angular project in the current workspace.`;
        context.logger.fatal(msg);
        throw new Error(msg);
    }
    return Object.assign(Object.assign({}, options), { project: project.name, projectName: project.name, projectDirectory: project.data.root
            .split(workspace_1.projectRootDir(workspace_1.ProjectType.Application) + '/')
            .pop(), projectRoot: project.data.root, appsDir: ast_utils_1.appsDir(tree), libsDir: ast_utils_1.libsDir(tree), darkMode,
        dependencies,
        plugins });
}
exports.normalizeOptionsNx = normalizeOptionsNx;
//# sourceMappingURL=normalize-options-nx.js.map