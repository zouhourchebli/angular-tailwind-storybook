import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, Injector } from '@angular/core';
import { SVG_ICONS_CONFIG } from './types';
import * as i0 from "@angular/core";
import * as i1 from "./types";
class SvgIcon {
    constructor(content) {
        this.content = content;
        this.init = false;
    }
}
export class SvgIconRegistry {
    constructor(injector, config) {
        this.svgMap = new Map();
        this.document = injector.get(DOCUMENT);
        if (config.icons) {
            this.register(config.icons);
        }
        if (config.missingIconFallback) {
            this.register(config.missingIconFallback);
        }
    }
    getAll() {
        return this.svgMap;
    }
    get(key) {
        const icon = key && this.svgMap.get(key);
        if (!icon) {
            return undefined;
        }
        if (!icon.init) {
            const svg = this.toElement(icon.content);
            svg.setAttribute('fit', '');
            svg.setAttribute('height', '100%');
            svg.setAttribute('width', '100%');
            svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
            svg.setAttribute('focusable', 'false');
            icon.content = svg.outerHTML;
            icon.init = true;
        }
        return icon.content;
    }
    register(icons) {
        for (const { name, data } of Array.isArray(icons) ? icons : [icons]) {
            if (!this.svgMap.has(name)) {
                this.svgMap.set(name, new SvgIcon(data));
            }
        }
    }
    getSvgElement(name) {
        const content = this.get(name);
        if (!content) {
            return undefined;
        }
        const div = this.document.createElement('div');
        div.innerHTML = content;
        return div.querySelector('svg');
    }
    toElement(content) {
        const div = this.document.createElement('div');
        div.innerHTML = content;
        return div.querySelector('svg');
    }
}
SvgIconRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function SvgIconRegistry_Factory() { return new SvgIconRegistry(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.SVG_ICONS_CONFIG)); }, token: SvgIconRegistry, providedIn: "root" });
SvgIconRegistry.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
SvgIconRegistry.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [SVG_ICONS_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ25lYXQvc3ZnLWljb24vc3JjL2xpYi9yZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBYyxnQkFBZ0IsRUFBZSxNQUFNLFNBQVMsQ0FBQzs7O0FBRXBFLE1BQU0sT0FBTztJQUdYLFlBQW1CLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRmxDLFNBQUksR0FBRyxLQUFLLENBQUM7SUFFd0IsQ0FBQztDQUN2QztBQUdELE1BQU0sT0FBTyxlQUFlO0lBSTFCLFlBQVksUUFBa0IsRUFBNEIsTUFBa0I7UUFIM0QsV0FBTSxHQUFHLElBQUksR0FBRyxFQUFtQixDQUFDO1FBSW5ELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV2QyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0I7UUFFRCxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtZQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUF1QjtRQUN6QixNQUFNLElBQUksR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM1QixHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNuQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNsQyxHQUFHLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQ3pELEdBQUcsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXZDLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztZQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNsQjtRQUVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWtDO1FBQ3pDLEtBQUssTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbkUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUMxQztTQUNGO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFZO1FBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFL0IsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7UUFFeEIsT0FBTyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBa0IsQ0FBQztJQUNuRCxDQUFDO0lBRU8sU0FBUyxDQUFDLE9BQWU7UUFDL0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7UUFFeEIsT0FBTyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBZSxDQUFDO0lBQ2hELENBQUM7Ozs7WUFyRUYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBVkwsUUFBUTs0Q0FlRixNQUFNLFNBQUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTVkdfQ09ORklHLCBTVkdfSUNPTlNfQ09ORklHLCBTdmdJY29uVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5jbGFzcyBTdmdJY29uIHtcbiAgaW5pdCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZW50OiBzdHJpbmcpIHt9XG59XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgU3ZnSWNvblJlZ2lzdHJ5IHtcbiAgcHJpdmF0ZSByZWFkb25seSBzdmdNYXAgPSBuZXcgTWFwPHN0cmluZywgU3ZnSWNvbj4oKTtcbiAgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yLCBASW5qZWN0KFNWR19JQ09OU19DT05GSUcpIGNvbmZpZzogU1ZHX0NPTkZJRykge1xuICAgIHRoaXMuZG9jdW1lbnQgPSBpbmplY3Rvci5nZXQoRE9DVU1FTlQpO1xuXG4gICAgaWYgKGNvbmZpZy5pY29ucykge1xuICAgICAgdGhpcy5yZWdpc3Rlcihjb25maWcuaWNvbnMpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcubWlzc2luZ0ljb25GYWxsYmFjaykge1xuICAgICAgdGhpcy5yZWdpc3Rlcihjb25maWcubWlzc2luZ0ljb25GYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgZ2V0QWxsKCkge1xuICAgIHJldHVybiB0aGlzLnN2Z01hcDtcbiAgfVxuXG4gIGdldChrZXk6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgaWNvbiA9IGtleSAmJiB0aGlzLnN2Z01hcC5nZXQoa2V5KTtcblxuICAgIGlmICghaWNvbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoIWljb24uaW5pdCkge1xuICAgICAgY29uc3Qgc3ZnID0gdGhpcy50b0VsZW1lbnQoaWNvbi5jb250ZW50KTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2ZpdCcsICcnKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICcxMDAlJyk7XG4gICAgICBzdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsICcxMDAlJyk7XG4gICAgICBzdmcuc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3hNaWRZTWlkIG1lZXQnKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2ZvY3VzYWJsZScsICdmYWxzZScpO1xuXG4gICAgICBpY29uLmNvbnRlbnQgPSBzdmcub3V0ZXJIVE1MO1xuICAgICAgaWNvbi5pbml0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaWNvbi5jb250ZW50O1xuICB9XG5cbiAgcmVnaXN0ZXIoaWNvbnM6IFN2Z0ljb25UeXBlIHwgU3ZnSWNvblR5cGVbXSkge1xuICAgIGZvciAoY29uc3QgeyBuYW1lLCBkYXRhIH0gb2YgQXJyYXkuaXNBcnJheShpY29ucykgPyBpY29ucyA6IFtpY29uc10pIHtcbiAgICAgIGlmICghdGhpcy5zdmdNYXAuaGFzKG5hbWUpKSB7XG4gICAgICAgIHRoaXMuc3ZnTWFwLnNldChuYW1lLCBuZXcgU3ZnSWNvbihkYXRhKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U3ZnRWxlbWVudChuYW1lOiBzdHJpbmcpOiBTVkdTVkdFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBjb250ZW50ID0gdGhpcy5nZXQobmFtZSk7XG5cbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgZGl2ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gY29udGVudDtcblxuICAgIHJldHVybiBkaXYucXVlcnlTZWxlY3Rvcignc3ZnJykgYXMgU1ZHU1ZHRWxlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgdG9FbGVtZW50KGNvbnRlbnQ6IHN0cmluZyk6IFNWR0VsZW1lbnQge1xuICAgIGNvbnN0IGRpdiA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmlubmVySFRNTCA9IGNvbnRlbnQ7XG5cbiAgICByZXR1cm4gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpIGFzIFNWR0VsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==