import { ChangeDetectionStrategy, Component, ElementRef, Inject, Input } from '@angular/core';
import { SvgIconRegistry } from './registry';
import { SVG_ICONS_CONFIG } from './types';
export class SvgIconComponent {
    constructor(host, registry, config) {
        this.host = host;
        this.registry = registry;
        this.config = config;
        this.mergedConfig = this.createConfig();
        this.element.style.fontSize = this.mergedConfig.sizes[this.mergedConfig.defaultSize || 'md'];
    }
    set key(name) {
        var _a, _b;
        const icon = (_a = this.registry.get(name)) !== null && _a !== void 0 ? _a : this.registry.get((_b = this.config.missingIconFallback) === null || _b === void 0 ? void 0 : _b.name);
        if (icon) {
            this.element.setAttribute('aria-label', `${name}-icon`);
            this.element.classList.remove(`svg-icon-${this.lastKey}`);
            this.lastKey = name;
            this.element.classList.add(`svg-icon-${name}`);
            this.element.innerHTML = icon;
        }
    }
    set size(value) {
        this.element.style.fontSize = this.mergedConfig.sizes[value];
    }
    set width(value) {
        this.element.style.width = coerceCssPixelValue(value);
    }
    set height(value) {
        this.element.style.height = coerceCssPixelValue(value);
    }
    set fontSize(value) {
        this.element.style.fontSize = coerceCssPixelValue(value);
    }
    set color(color) {
        this.element.style.color = color;
    }
    get element() {
        return this.host.nativeElement;
    }
    createConfig() {
        const defaults = {
            sizes: {
                xs: '0.5rem',
                sm: '0.75rem',
                md: '1rem',
                lg: '1.5rem',
                xl: '2rem',
                xxl: '2.5rem',
            },
        };
        return Object.assign(Object.assign({}, defaults), this.config);
    }
}
SvgIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'svg-icon',
                template: '',
                host: {
                    role: 'img',
                    'aria-hidden': 'true',
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
      :host {
        display: inline-block;
        fill: currentColor;
        width: 1em;
        height: 1em;
        font-size: 1rem;
      }
    `]
            },] }
];
SvgIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: SvgIconRegistry },
    { type: undefined, decorators: [{ type: Inject, args: [SVG_ICONS_CONFIG,] }] }
];
SvgIconComponent.propDecorators = {
    key: [{ type: Input }],
    size: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    fontSize: [{ type: Input }],
    color: [{ type: Input }]
};
function coerceCssPixelValue(value) {
    if (value == null) {
        return '';
    }
    return typeof value === 'string' ? value : `${value}px`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmduZWF0L3N2Zy1pY29uL3NyYy9saWIvc3ZnLWljb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM3QyxPQUFPLEVBQWMsZ0JBQWdCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFzQnZELE1BQU0sT0FBTyxnQkFBZ0I7SUF3QzNCLFlBQ1UsSUFBZ0IsRUFDaEIsUUFBeUIsRUFDQyxNQUFrQjtRQUY1QyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ0MsV0FBTSxHQUFOLE1BQU0sQ0FBWTtRQUVwRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQTlDRCxJQUNJLEdBQUcsQ0FBQyxJQUFZOztRQUNsQixNQUFNLElBQUksR0FBRyxNQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQ0FBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLDBDQUFFLElBQUksQ0FBQyxDQUFDO1FBRWpHLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCxJQUNJLElBQUksQ0FBQyxLQUFnQztRQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELElBQWEsS0FBSyxDQUFDLEtBQXNCO1FBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsSUFBYSxNQUFNLENBQUMsS0FBc0I7UUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxJQUNJLFFBQVEsQ0FBQyxLQUFzQjtRQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELElBQ0ksS0FBSyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNuQyxDQUFDO0lBY0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUNqQyxDQUFDO0lBRU8sWUFBWTtRQUNsQixNQUFNLFFBQVEsR0FBZTtZQUMzQixLQUFLLEVBQUU7Z0JBQ0wsRUFBRSxFQUFFLFFBQVE7Z0JBQ1osRUFBRSxFQUFFLFNBQVM7Z0JBQ2IsRUFBRSxFQUFFLE1BQU07Z0JBQ1YsRUFBRSxFQUFFLFFBQVE7Z0JBQ1osRUFBRSxFQUFFLE1BQU07Z0JBQ1YsR0FBRyxFQUFFLFFBQVE7YUFDZDtTQUNGLENBQUM7UUFFRix1Q0FDSyxRQUFRLEdBQ1IsSUFBSSxDQUFDLE1BQU0sRUFDZDtJQUNKLENBQUM7OztZQXpGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFFBQVEsRUFBRSxFQUFFO2dCQUNaLElBQUksRUFBRTtvQkFDSixJQUFJLEVBQUUsS0FBSztvQkFDWCxhQUFhLEVBQUUsTUFBTTtpQkFDdEI7Z0JBWUQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07eUJBVjdDOzs7Ozs7OztLQVFDO2FBR0o7OztZQXhCNEMsVUFBVTtZQUU5QyxlQUFlOzRDQWtFbkIsTUFBTSxTQUFDLGdCQUFnQjs7O2tCQTFDekIsS0FBSzttQkFhTCxLQUFLO29CQUtMLEtBQUs7cUJBSUwsS0FBSzt1QkFJTCxLQUFLO29CQUtMLEtBQUs7O0FBd0NSLFNBQVMsbUJBQW1CLENBQUMsS0FBVTtJQUNyQyxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDakIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUVELE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUM7QUFDMUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3ZnSWNvblJlZ2lzdHJ5IH0gZnJvbSAnLi9yZWdpc3RyeSc7XG5pbXBvcnQgeyBTVkdfQ09ORklHLCBTVkdfSUNPTlNfQ09ORklHIH0gZnJvbSAnLi90eXBlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3N2Zy1pY29uJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBob3N0OiB7XG4gICAgcm9sZTogJ2ltZycsXG4gICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICB9LFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgZmlsbDogY3VycmVudENvbG9yO1xuICAgICAgICB3aWR0aDogMWVtO1xuICAgICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgfVxuICAgIGAsXG4gIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBTdmdJY29uQ29tcG9uZW50IHtcbiAgQElucHV0KClcbiAgc2V0IGtleShuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpY29uID0gdGhpcy5yZWdpc3RyeS5nZXQobmFtZSkgPz8gdGhpcy5yZWdpc3RyeS5nZXQodGhpcy5jb25maWcubWlzc2luZ0ljb25GYWxsYmFjaz8ubmFtZSk7XG5cbiAgICBpZiAoaWNvbikge1xuICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGAke25hbWV9LWljb25gKTtcbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGBzdmctaWNvbi0ke3RoaXMubGFzdEtleX1gKTtcbiAgICAgIHRoaXMubGFzdEtleSA9IG5hbWU7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChgc3ZnLWljb24tJHtuYW1lfWApO1xuICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IGljb247XG4gICAgfVxuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHNpemUodmFsdWU6IGtleW9mIFNWR19DT05GSUdbJ3NpemVzJ10pIHtcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSB0aGlzLm1lcmdlZENvbmZpZy5zaXplc1t2YWx1ZV07XG4gIH1cblxuICBASW5wdXQoKSBzZXQgd2lkdGgodmFsdWU6IG51bWJlciB8IHN0cmluZykge1xuICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IGNvZXJjZUNzc1BpeGVsVmFsdWUodmFsdWUpO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGhlaWdodCh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IGNvZXJjZUNzc1BpeGVsVmFsdWUodmFsdWUpO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGZvbnRTaXplKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSBjb2VyY2VDc3NQaXhlbFZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBjb2xvcihjb2xvcjogc3RyaW5nKSB7XG4gICAgdGhpcy5lbGVtZW50LnN0eWxlLmNvbG9yID0gY29sb3I7XG4gIH1cblxuICBwcml2YXRlIG1lcmdlZENvbmZpZzogU1ZHX0NPTkZJRztcbiAgcHJpdmF0ZSBsYXN0S2V5ITogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaG9zdDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlZ2lzdHJ5OiBTdmdJY29uUmVnaXN0cnksXG4gICAgQEluamVjdChTVkdfSUNPTlNfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogU1ZHX0NPTkZJR1xuICApIHtcbiAgICB0aGlzLm1lcmdlZENvbmZpZyA9IHRoaXMuY3JlYXRlQ29uZmlnKCk7XG4gICAgdGhpcy5lbGVtZW50LnN0eWxlLmZvbnRTaXplID0gdGhpcy5tZXJnZWRDb25maWcuc2l6ZXNbdGhpcy5tZXJnZWRDb25maWcuZGVmYXVsdFNpemUgfHwgJ21kJ107XG4gIH1cblxuICBnZXQgZWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUNvbmZpZygpIHtcbiAgICBjb25zdCBkZWZhdWx0czogU1ZHX0NPTkZJRyA9IHtcbiAgICAgIHNpemVzOiB7XG4gICAgICAgIHhzOiAnMC41cmVtJyxcbiAgICAgICAgc206ICcwLjc1cmVtJyxcbiAgICAgICAgbWQ6ICcxcmVtJyxcbiAgICAgICAgbGc6ICcxLjVyZW0nLFxuICAgICAgICB4bDogJzJyZW0nLFxuICAgICAgICB4eGw6ICcyLjVyZW0nLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRlZmF1bHRzLFxuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb2VyY2VDc3NQaXhlbFZhbHVlKHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBgJHt2YWx1ZX1weGA7XG59XG4iXX0=