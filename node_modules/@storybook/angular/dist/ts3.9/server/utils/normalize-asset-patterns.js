"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeAssetPatterns = exports.MissingAssetSourceRootException = void 0;
/**
 * Clone of `normalizeAssetPatterns` function from angular-cli v11.2.*
 * > https://github.com/angular/angular-cli/blob/de63f41d669e42ada84f94ca1795d2791b9b45cc/packages/angular_devkit/build_angular/src/utils/normalize-asset-patterns.ts
 *
 * It is not possible to use the original because arguments have changed between version 6.1.* and 11.*.* of angular-cli
 */
var fs_1 = require("fs");
var core_1 = require("@angular-devkit/core");
var MissingAssetSourceRootException = /** @class */ (function (_super) {
    __extends(MissingAssetSourceRootException, _super);
    function MissingAssetSourceRootException(path) {
        return _super.call(this, "The " + path + " asset path must start with the project source root.") || this;
    }
    return MissingAssetSourceRootException;
}(core_1.BaseException));
exports.MissingAssetSourceRootException = MissingAssetSourceRootException;
function normalizeAssetPatterns(assetPatterns, root, projectRoot, maybeSourceRoot) {
    // When sourceRoot is not available, we default to ${projectRoot}/src.
    var sourceRoot = maybeSourceRoot || core_1.join(projectRoot, 'src');
    var resolvedSourceRoot = core_1.resolve(root, sourceRoot);
    if (assetPatterns.length === 0) {
        return [];
    }
    return assetPatterns.map(function (assetPattern) {
        // Normalize string asset patterns to objects.
        if (typeof assetPattern === 'string') {
            var assetPath = core_1.normalize(assetPattern);
            var resolvedAssetPath = core_1.resolve(root, assetPath);
            // Check if the string asset is within sourceRoot.
            if (!resolvedAssetPath.startsWith(resolvedSourceRoot)) {
                throw new MissingAssetSourceRootException(assetPattern);
            }
            var glob = void 0;
            var input = void 0;
            var isDirectory = false;
            try {
                isDirectory = fs_1.statSync(core_1.getSystemPath(resolvedAssetPath)).isDirectory();
            }
            catch (_a) {
                isDirectory = true;
            }
            if (isDirectory) {
                // Folders get a recursive star glob.
                glob = '**/*';
                // Input directory is their original path.
                input = assetPath;
            }
            else {
                // Files are their own glob.
                glob = core_1.basename(assetPath);
                // Input directory is their original dirname.
                input = core_1.dirname(assetPath);
            }
            // Output directory for both is the relative path from source root to input.
            var output = core_1.relative(resolvedSourceRoot, core_1.resolve(root, input));
            // Return the asset pattern in object format.
            return { glob: glob, input: input, output: output };
        }
        // It's already an AssetPatternObject, no need to convert.
        return assetPattern;
    });
}
exports.normalizeAssetPatterns = normalizeAssetPatterns;
